# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:53:45+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    BulkexportsV1Export,
    BulkexportsV1ExportConfiguration,
    BulkexportsV1ExportDayInstance,
    BulkexportsV1ExportExportCustomJob,
    BulkexportsV1ExportJob,
    V1ExportsResourceTypeDaysGetResponse,
    V1ExportsResourceTypeJobsGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Bulkexports',
    version='1.42.0',
    servers=[{'url': 'https://bulkexports.twilio.com'}],
)


@app.delete(
    '/v1/Exports/Jobs/{JobSid}',
    tags=['job_management', 'export_job_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_job(
    job_sid: constr(
        pattern=r'^JS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='JobSid')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Exports/Jobs/{JobSid}',
    tags=['export_job_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_job(
    job_sid: constr(
        pattern=r'^JS[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='JobSid')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Exports/{ResourceType}',
    description=""" Fetch a specific Export. """,
    tags=['daily_resource_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_export(resource_type: str = Path(..., alias='ResourceType')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Exports/{ResourceType}/Configuration',
    description=""" Fetch a specific Export Configuration. """,
    tags=['daily_resource_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_export_configuration(resource_type: str = Path(..., alias='ResourceType')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Exports/{ResourceType}/Configuration',
    description=""" Update a specific Export Configuration. """,
    tags=['daily_resource_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_export_configuration(
    resource_type: str = Path(..., alias='ResourceType'), request: Request = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Exports/{ResourceType}/Days',
    description=""" Retrieve a list of all Days for a resource. """,
    tags=['daily_resource_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_day(
    resource_type: str = Path(..., alias='ResourceType'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Exports/{ResourceType}/Days/{Day}',
    description=""" Fetch a specific Day. """,
    tags=['daily_resource_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_day(
    resource_type: str = Path(..., alias='ResourceType'),
    day: str = Path(..., alias='Day'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Exports/{ResourceType}/Jobs',
    tags=['daily_resource_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_export_custom_job(
    resource_type: str = Path(..., alias='ResourceType'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Exports/{ResourceType}/Jobs',
    tags=['daily_resource_management'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_export_custom_job(
    resource_type: str = Path(..., alias='ResourceType'), request: Request = ...
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
